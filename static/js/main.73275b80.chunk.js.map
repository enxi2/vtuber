{"version":3,"sources":["Icon.tsx","AboutModal.tsx","useScheduleData.ts","ListSchedule.tsx","SearchHelpModal.tsx","useStoredRecord.ts","useStoredSet.ts","usePreferences.ts","App.tsx","useNotifications.ts","index.tsx"],"names":["Icon","props","children","className","AboutModal","show","handleClose","Modal","onHide","Header","closeButton","Title","Body","Notification","permission","href","target","rel","Footer","Button","variant","onClick","useScheduleData","useState","Map","vtubers","setVtubers","OrderedMap","streams","setStreams","streamsByVtuber","setStreamsByVtuber","loadedLatest","setLoadedLatest","useEffect","fetch","then","response","json","data","reduce","vtuber","has","vtuberId","set","newStreams","stream","streamId","source","title","link","thumbnail","startTime","Date","endTime","membership","parseStream","valueSeq","groupBy","map","collection","toList","toMap","catch","e","console","error","ListSchedule","bookmarks","setBookmarks","notifications","setNotifications","container","useRef","firstView","setFirstView","sortedStreams","useMemo","sortBy","getTime","scrollToCurrentStream","useCallback","firstStream","find","now","current","item","document","getElementById","scrollIntoView","items","get","hasBookmark","hasNotification","moment","isLive","Row","id","Col","xs","md","remove","add","lg","src","alt","name","shortName","process","format","fromNow","count","ref","SearchHelpModal","useStoredRecord","key","factory","localStorage","getItem","JSON","parse","getRecordOrDefault","value","setValueInner","newValue","setItem","stringify","toJSON","removeItem","useStoredSet","Set","getOrDefault","toArray","TIMEZONES","identifier","offset","DEFAULT_SITE_PREF","timezone","getTimezoneOffset","minTimezone","Math","abs","getDefaultTimezone","nameDisplay","RSitePref","Record","RFilterPref","search","RSortPref","App","aboutModalVisible","setAboutModalVisible","searchHelpModalVisible","setSearchHelpModalVisible","schedule","sitePref","setSitePref","clearSitePref","filterPref","setFilterPref","clearFilterPref","sortPref","setSortPref","clearSortPref","reset","usePreferences","setPermission","updateNotificationPermission","requestPermission","useNotifications","clearData","window","confirm","Navbar","expand","Container","Brand","Toggle","aria-controls","Collapse","Nav","Link","Form","Group","as","InputGroup","Prepend","Text","Control","placeholder","Append","parent","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.73275b80.chunk.js","sourcesContent":["export default function Icon(props: {\n  children: string;\n  className?: string;\n}): JSX.Element {\n  const { children, className = \"\" } = props;\n  return <span className={`material-icons ${className}`}>{children}</span>;\n}\n","import Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nimport Icon from \"./Icon\";\n\nexport default function AboutModal(props: {\n  show: boolean;\n  handleClose: () => void;\n}) {\n  const { show, handleClose } = props;\n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>VTuber Schedules</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          A page to check, search, and get notifications about VTuber streams.\n        </p>\n        <ul>\n          <li>\n            <Icon>star_outline</Icon> to bookmark a VTuber\n          </li>\n          <li>\n            <Icon>notifications_none</Icon> to receive notifications for a\n            VTuber (notifications are{\" \"}\n            <b>\n              {Notification.permission === \"granted\" ? \"allowed\" : \"blocked\"}\n            </b>\n            )\n          </li>\n          <li>\n            <b>Clear Data</b> will clear all data on this website\n          </li>\n        </ul>\n        <p>\n          Google Analytics is used to measure page views and user demographics\n          (with user consent). To reset user consent, click the \"Clear Data\"\n          button. All other data (search, bookmarks, notifications) are local to\n          the web page.\n        </p>\n        <p>\n          Send questions or feedback to{\" \"}\n          <a href=\"mailto:erin.xi@outlook.com\">erin.xi@outlook.com</a> or{\" \"}\n          <a\n            href=\"https://discordapp.com/users/659617582298562570\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            enxi#0410\n          </a>\n          .\n        </p>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" onClick={handleClose}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import { List, Map, OrderedMap } from \"immutable\";\nimport { useEffect, useState } from \"react\";\n\nimport {\n  ScheduleData,\n  SerializedStream,\n  Stream,\n  StreamId,\n  StreamSource,\n  VTuberId,\n  VTuber,\n} from \"./types\";\n\nfunction parseStream(stream: SerializedStream): Stream {\n  return {\n    streamId: stream.streamId,\n    vtuberId: stream.vtuberId,\n    source: stream.source as StreamSource | null,\n    title: stream.title,\n    link: stream.link,\n    thumbnail: stream.thumbnail,\n    startTime: new Date(stream.startTime),\n    endTime: stream.endTime != null ? new Date(stream.endTime) : null,\n    membership: stream.membership === 1,\n  };\n}\n\nexport default function useScheduleData() {\n  const [vtubers, setVtubers] = useState<Map<VTuberId, VTuber>>(Map());\n  const [streams, setStreams] = useState<Map<StreamId, Stream>>(OrderedMap());\n  const [streamsByVtuber, setStreamsByVtuber] = useState<\n    Map<VTuberId, List<Stream>>\n  >(Map());\n  const [loadedLatest, setLoadedLatest] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (loadedLatest) {\n      return;\n    }\n\n    fetch(\"data/latest.json\")\n      .then((response) => response.json())\n      .then((data: ScheduleData) => {\n        setVtubers(\n          data.vtubers.reduce(\n            (vtubers, vtuber) =>\n              vtubers.has(vtuber.vtuberId)\n                ? vtubers\n                : vtubers.set(vtuber.vtuberId, vtuber),\n            vtubers\n          )\n        );\n        const newStreams = data.streams.reduce(\n          (streams, stream) =>\n            streams.has(stream.streamId)\n              ? streams\n              : streams.set(stream.streamId, parseStream(stream)),\n          streams\n        );\n        setStreams(newStreams);\n        setStreamsByVtuber(\n          newStreams\n            .valueSeq()\n            .groupBy((stream) => stream.vtuberId)\n            .map((collection) => collection.toList())\n            .toMap()\n        );\n        setLoadedLatest(true);\n      })\n      .catch((e) => console.error(e));\n  }, [loadedLatest, streams, vtubers]);\n\n  return { vtubers, streams, streamsByVtuber };\n}\n","import { List, Record, Set } from \"immutable\";\nimport moment from \"moment-timezone\";\nimport {\n  RefObject,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nimport Icon from \"./Icon\";\nimport { Stream, VTuber } from \"./types\";\nimport { SitePref, SortPref } from \"./usePreferences\";\nimport useScheduleData from \"./useScheduleData\";\n\nimport \"./ListSchedule.scss\";\n\nexport default function ListSchedule(props: {\n  parent: RefObject<HTMLDivElement>;\n  sitePref: Record<SitePref>;\n  sortPref: Record<SortPref>;\n  bookmarks: Set<string>;\n  setBookmarks: (bookmarks: Set<string>) => void;\n  notifications: Set<string>;\n  setNotifications: (notifications: Set<string>) => void;\n}) {\n  const { bookmarks, setBookmarks, notifications, setNotifications } = props;\n\n  const container = useRef<HTMLDivElement>(null);\n  const [firstView, setFirstView] = useState<boolean>(true);\n\n  const { vtubers, streams } = useScheduleData();\n\n  const sortedStreams = useMemo(\n    (): List<Stream> =>\n      streams\n        .valueSeq()\n        .sortBy((stream: Stream): number => stream.startTime.getTime())\n        .toList(),\n    [streams]\n  );\n\n  const scrollToCurrentStream = useCallback((): boolean => {\n    const firstStream = sortedStreams.find(\n      (stream: Stream): boolean =>\n        (stream.endTime == null && Date.now() > stream.startTime.getTime()) ||\n        Date.now() < stream.startTime.getTime()\n    );\n    if (container.current != null && firstStream != null) {\n      const item = document.getElementById(firstStream.streamId);\n      if (item != null) {\n        item.scrollIntoView();\n        return true;\n      }\n    }\n    return false;\n  }, [sortedStreams]);\n\n  const items = useMemo(\n    () =>\n      sortedStreams.map((stream: Stream): JSX.Element => {\n        const vtuberId = stream.vtuberId;\n        const vtuber: VTuber = vtubers.get(vtuberId)!;\n        const hasBookmark = bookmarks.has(vtuberId);\n        const hasNotification = notifications.has(vtuberId);\n        const startTime = moment(stream.startTime);\n        const endTime = stream.endTime != null ? moment(stream.endTime) : null;\n        const isLive =\n          stream.endTime == null && Date.now() > stream.startTime.getTime();\n\n        return (\n          <Row\n            key={stream.streamId}\n            id={stream.streamId}\n            className={`stream-item d-flex flex-row m-0 py-2 ${\n              isLive ? \"live\" : \"\"\n            }`}\n          >\n            <Col xs={2} md={1} className=\"stream-toggles text-center\">\n              <div\n                className={`toggle-bookmark ${hasBookmark ? \"active\" : \"\"}`}\n                onClick={() =>\n                  hasBookmark\n                    ? setBookmarks(bookmarks.remove(vtuberId))\n                    : setBookmarks(bookmarks.add(vtuberId))\n                }\n              >\n                <Icon>{hasBookmark ? \"star\" : \"star_outline\"}</Icon>\n              </div>\n              <br />\n              <div\n                className={`toggle-notification ${\n                  hasNotification ? \"active\" : \"\"\n                }`}\n                onClick={() =>\n                  hasNotification\n                    ? setNotifications(notifications.remove(vtuberId))\n                    : setNotifications(notifications.add(vtuberId))\n                }\n              >\n                <Icon>\n                  {hasNotification\n                    ? \"notifications_active\"\n                    : \"notifications_none\"}\n                </Icon>\n              </div>\n            </Col>\n\n            <Col xs={4} md={2} lg={1} className=\"stream-vtuber p-0\">\n              <a href={vtuber.link}>\n                <img src={vtuber.thumbnail} alt={vtuber.name} />\n                <br />\n                {vtuber.shortName}\n              </a>\n            </Col>\n\n            <Col xs={6} md={3} lg={2} className=\"stream-info p-0 text-center\">\n              <a href={stream.link} target=\"_blank\" rel=\"noreferrer\">\n                <img\n                  src={\n                    stream.thumbnail ??\n                    `${process.env.PUBLIC_URL}/placeholder.png`\n                  }\n                  alt={\"Video thumbnail\"}\n                />\n              </a>\n            </Col>\n\n            <Col\n              xs={12}\n              md={6}\n              className=\"stream-title px-0 py-2 text-center text-md-left\"\n            >\n              <a href={stream.link} target=\"_blank\" rel=\"noreferrer\">\n                {stream.title}\n              </a>\n            </Col>\n\n            <Col xs={12} lg={2} className=\"stream-time p-0 text-center\">\n              {startTime.format(\"h:mm A\")} <br className=\"d-none d-lg-inline\" />\n              <i>\n                {endTime != null\n                  ? `ended ${endTime.fromNow()}`\n                  : isLive\n                  ? `started ${startTime.fromNow()}`\n                  : `starting ${startTime.fromNow()}`}\n              </i>\n            </Col>\n          </Row>\n        );\n      }),\n    [\n      bookmarks,\n      setBookmarks,\n      notifications,\n      setNotifications,\n      sortedStreams,\n      vtubers,\n    ]\n  );\n\n  useEffect((): void => {\n    if (firstView && sortedStreams.count() > 0) {\n      if (scrollToCurrentStream()) {\n        setFirstView(false);\n      }\n    }\n  }, [firstView, scrollToCurrentStream, sortedStreams]);\n\n  return (\n    <div className=\"list-schedule\" ref={container}>\n      {items}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nexport default function SearchHelpModal(props: {\n  show: boolean;\n  handleClose: () => void;\n}) {\n  const { show, handleClose } = props;\n\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Search Help</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          Use the search to filter for VTubers and streams. The following\n          case-insensitive search terms are supported:\n        </p>\n        <ul>\n          <li>\n            General search terms such as <code>pikamee</code> or{\" \"}\n            <code>superchat</code> filter both VTuber and video titles.\n          </li>\n          <li>\n            Terms with spaces require surrounding quotes, such as{\" \"}\n            <code>\"super chat\"</code>.\n          </li>\n          <li>\n            Specific VTubers can be searched using the <code>v:</code> prefix,\n            such as <code>v:pikamee</code>.\n          </li>\n          <li>\n            Specific groups can be searched using the <code>g:</code> prefix.\n            The supported groups are:\n            <ul>\n              <li>\n                <code>g:hololive</code>\n              </li>\n              <li>\n                <code>g:voms</code>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" onClick={handleClose}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import { Record } from \"immutable\";\nimport { useCallback, useState } from \"react\";\n\nfunction getRecordOrDefault<T>(\n  key: string,\n  factory: (values?: any) => Record<T>\n): Record<T> {\n  const item = localStorage.getItem(key);\n  if (item != null) {\n    try {\n      return factory(JSON.parse(item));\n    } catch (e) {\n      return factory();\n    }\n  }\n  return factory();\n}\n\nexport default function useStoredRecord<T>(\n  key: string,\n  factory: (values?: any) => Record<T>\n): [Record<T>, (value: Record<T>) => void, () => void] {\n  const [value, setValueInner] = useState<Record<T>>(\n    getRecordOrDefault<T>(key, factory)\n  );\n\n  const setValue = useCallback(\n    (newValue: Record<T>): void => {\n      localStorage.setItem(key, JSON.stringify(newValue.toJSON()));\n      setValueInner(newValue);\n    },\n    [key]\n  );\n\n  const clearValue = useCallback(() => {\n    localStorage.removeItem(key);\n    setValueInner(factory());\n  }, [factory, key]);\n\n  return [value, setValue, clearValue];\n}\n","import { Set } from \"immutable\";\nimport { useCallback, useState } from \"react\";\n\nfunction getOrDefault(key: string): Set<string> {\n  const item = localStorage.getItem(key);\n  if (item != null) {\n    try {\n      return Set(JSON.parse(item) as unknown as string[]);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  return Set();\n}\n\nexport default function useStoredSet(\n  key: string\n): [Set<string>, (value: Set<string>) => void] {\n  const [value, setValueInner] = useState<Set<string>>(getOrDefault(key));\n\n  const setValue = useCallback(\n    (newValue: Set<string>) => {\n      localStorage.setItem(key, JSON.stringify(newValue.toArray()));\n      setValueInner(newValue);\n    },\n    [key]\n  );\n\n  return [value, setValue];\n}\n","import { Record } from \"immutable\";\nimport { useCallback } from \"react\";\n\nimport { NameDisplay, SortBy, Timezone } from \"./types\";\nimport useStoredRecord from \"./useStoredRecord\";\nimport useStoredSet from \"./useStoredSet\";\n\nexport const TIMEZONES: Timezone[] = [\n  { name: \"UTC\", identifier: \"UTC\", offset: 0 },\n  { name: \"PDT\", identifier: \"America/Los_Angeles\", offset: 480 },\n];\n\nexport const NAME_DISPLAYS: NameDisplay[] = [\"original\", \"romaji\", \"short\"];\n\nexport const SORT_BYS: SortBy[] = [\"next stream\", \"popularity\", \"random\"];\n\nfunction getDefaultTimezone(): Timezone {\n  const offset = new Date().getTimezoneOffset();\n  const timezone = TIMEZONES.reduce((minTimezone, timezone) =>\n    Math.abs(offset - timezone.offset) < Math.abs(offset - minTimezone.offset)\n      ? timezone\n      : minTimezone\n  );\n  if (timezone != null) {\n    return timezone;\n  }\n\n  // Return UTC\n  return TIMEZONES[0];\n}\n\nexport type SitePref = {\n  timezone: Timezone;\n  nameDisplay: NameDisplay;\n};\n\nconst DEFAULT_SITE_PREF: SitePref = {\n  timezone: getDefaultTimezone(),\n  nameDisplay: \"original\",\n};\n\nexport type FilterPref = {\n  search: string;\n};\n\nconst DEFAULT_FILTER_PREF: FilterPref = {\n  search: \"\",\n};\n\nexport type SortPref = {\n  sortBy: SortBy;\n};\n\nconst DEFAULT_SORT_PREF: SortPref = {\n  sortBy: \"next stream\",\n};\n\nexport const RSitePref = Record<SitePref>(DEFAULT_SITE_PREF);\nexport const RFilterPref = Record<FilterPref>(DEFAULT_FILTER_PREF);\nexport const RSortPref = Record<SortPref>(DEFAULT_SORT_PREF);\n\nexport default function usePreferences() {\n  const [sitePref, setSitePref, clearSitePref] = useStoredRecord<SitePref>(\n    \"site\",\n    RSitePref\n  );\n  const [filterPref, setFilterPref, clearFilterPref] =\n    useStoredRecord<FilterPref>(\"filter\", RFilterPref);\n  const [sortPref, setSortPref, clearSortPref] = useStoredRecord<SortPref>(\n    \"sort\",\n    RSortPref\n  );\n  const [bookmarks, setBookmarks] = useStoredSet(\"bookmarks\");\n  const [notifications, setNotifications] = useStoredSet(\"notifications\");\n\n  const reset = useCallback(() => {\n    clearSitePref();\n    clearFilterPref();\n    clearSortPref();\n  }, [clearSitePref, clearFilterPref, clearSortPref]);\n\n  return {\n    sitePref,\n    setSitePref,\n    filterPref,\n    setFilterPref,\n    sortPref,\n    setSortPref,\n    reset,\n    bookmarks,\n    setBookmarks,\n    notifications,\n    setNotifications,\n  };\n}\n","import { useCallback, useRef, useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nimport AboutModal from \"./AboutModal\";\nimport ListSchedule from \"./ListSchedule\";\nimport SearchHelpModal from \"./SearchHelpModal\";\nimport useNotifications from \"./useNotifications\";\nimport usePreferences from \"./usePreferences\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [aboutModalVisible, setAboutModalVisible] = useState<boolean>(false);\n  const [searchHelpModalVisible, setSearchHelpModalVisible] =\n    useState<boolean>(false);\n  const schedule = useRef<HTMLDivElement>(null);\n\n  const {\n    sitePref,\n    sortPref,\n    reset,\n    bookmarks,\n    setBookmarks,\n    notifications,\n    setNotifications,\n  } = usePreferences();\n\n  useNotifications();\n\n  const clearData = useCallback(() => {\n    if (\n      window.confirm(\n        \"Press OK to clear all bookmarks, filters, etc. from this web page.\"\n      )\n    ) {\n      reset();\n    }\n  }, [reset]);\n\n  return (\n    <div className=\"app d-flex flex-column h-100\">\n      <Navbar expand=\"md\">\n        <Container>\n          <Navbar.Brand href=\"#\">VTuber Schedules</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link href=\"#\" onClick={clearData}>\n                Clear Data\n              </Nav.Link>\n              <Nav.Link href=\"#\" onClick={() => setAboutModalVisible(true)}>\n                About\n              </Nav.Link>\n              {/*\n              <NavDropdown id=\"timezone\" title={sitePref.get(\"timezone\").name}>\n                {TIMEZONES.map((timezone) => (\n                  <NavDropdown.Item\n                    key={timezone.name}\n                    onClick={() =>\n                      setSitePref(sitePref.set(\"timezone\", timezone))\n                    }\n                  >\n                    {timezone.name}\n                  </NavDropdown.Item>\n                ))}\n              </NavDropdown>\n              <NavDropdown\n                id=\"name_display\"\n                title={sitePref.get(\"nameDisplay\")}\n              >\n                {NAME_DISPLAYS.map((nameDisplay) => (\n                  <NavDropdown.Item\n                    key={nameDisplay}\n                    className=\"text-capitalize\"\n                    onClick={() =>\n                      setSitePref(sitePref.set(\"nameDisplay\", nameDisplay))\n                    }\n                  >\n                    {nameDisplay}\n                  </NavDropdown.Item>\n                ))}\n              </NavDropdown>\n              */}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      <Container className=\"px-3 px-md-0\">\n        <Form>\n          <Form.Row>\n            <Form.Group as={Col} className=\"m-0\">\n              <InputGroup className=\"mb-2 mr-sm-2\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>\n                    <span className=\"material-icons\">search</span>\n                  </InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  id=\"search\"\n                  placeholder=\"v:pikamee g:voms title\"\n                />\n                <InputGroup.Append>\n                  <InputGroup.Text\n                    className=\"help\"\n                    onClick={() => setSearchHelpModalVisible(true)}\n                  >\n                    <span className=\"material-icons\">help_outline</span>\n                  </InputGroup.Text>\n                </InputGroup.Append>\n              </InputGroup>\n            </Form.Group>\n            {/*\n            <Form.Group as={Col} className=\"m-0\">\n              <Dropdown>\n                <Dropdown.Toggle id=\"sort\" className=\"text-capitalize\">\n                  Sort by: {sortPref.get(\"sortBy\")}\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                  {SORT_BYS.map((sortBy) => (\n                    <Dropdown.Item\n                      key={sortBy}\n                      className=\"text-capitalize\"\n                      onClick={() =>\n                        setSortPref(sortPref.set(\"sortBy\", sortBy))\n                      }\n                    >\n                      {sortBy}\n                    </Dropdown.Item>\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n            </Form.Group>\n            */}\n          </Form.Row>\n        </Form>\n      </Container>\n      <Container className=\"schedule px-3 px-md-0 my-2\" ref={schedule}>\n        <ListSchedule\n          parent={schedule}\n          sitePref={sitePref}\n          sortPref={sortPref}\n          bookmarks={bookmarks}\n          setBookmarks={setBookmarks}\n          notifications={notifications}\n          setNotifications={setNotifications}\n        />\n      </Container>\n      <AboutModal\n        show={aboutModalVisible}\n        handleClose={() => setAboutModalVisible(false)}\n      />\n      <SearchHelpModal\n        show={searchHelpModalVisible}\n        handleClose={() => setSearchHelpModalVisible(false)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { useCallback, useEffect, useState } from \"react\";\n\nexport default function useNotifications() {\n  const [permission, setPermission] =\n    useState<NotificationPermission>(\"default\");\n\n  const updateNotificationPermission = useCallback(\n    (permission: NotificationPermission): void => {\n      setPermission(permission);\n    },\n    []\n  );\n\n  useEffect((): void => {\n    Notification.requestPermission().then(\n      (permission: NotificationPermission): void => {\n        updateNotificationPermission(permission);\n      }\n    );\n  }, [updateNotificationPermission]);\n\n  return { permission };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}