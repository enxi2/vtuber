{"version":3,"sources":["Icon.tsx","AboutModal.tsx","ListSchedule.tsx","SearchHelpModal.tsx","useStoredRecord.ts","useStoredSet.ts","usePreferences.ts","useScheduleData.ts","App.tsx","usePoller.ts","useNotifications.tsx","index.tsx"],"names":["Icon","props","children","className","otherProps","AboutModal","show","handleClose","notificationPermission","showNotification","useState","showEmail","setShowEmail","Modal","onHide","Header","closeButton","Title","Body","Button","onClick","process","variant","href","target","rel","Footer","Status","getStatus","stream","now","endTime","valueOf","startTime","getTime","LIVE","ENDED","UPCOMING","countQuotes","s","count","i","length","charAt","parseFilterQuery","query","parts","split","quotedParts","quotes","replaceAll","push","splitQuery","map","part","cleanQuery","toLowerCase","startsWith","vtuberName","substring","matches","vtubers","vtuber","get","vtuberId","name","includes","romanizedName","groupName","bookmarks","has","_","notifications","title","parseCondition","filter","condition","ListSchedule","streams","setBookmarks","setNotifications","filterPref","setScrollToCurrentStream","container","useRef","firstView","setFirstView","filteredStreams","useMemo","conditions","valueSeq","every","toList","sortedStreams","sort","a","b","aStatus","bStatus","nextStream","find","scrollToCurrentStream","useCallback","smooth","current","item","document","getElementById","streamId","scrollIntoView","behavior","undefined","useEffect","items","hasBookmark","hasNotification","moment","status","Row","id","Col","xs","md","remove","add","lg","link","src","thumbnail","alt","shortName","format","from","ref","SearchHelpModal","useStoredRecord","key","factory","localStorage","getItem","data","JSON","parse","Array","isArray","List","e","getRecordOrDefault","value","setValueInner","newValue","setItem","stringify","toJSON","removeItem","useStoredSet","Set","console","error","getOrDefault","toArray","TIMEZONES","identifier","offset","DEFAULT_SITE_PREF","timezone","Date","getTimezoneOffset","reduce","minTimezone","Math","abs","getDefaultTimezone","nameDisplay","DEFAULT_FILTER_PREF","search","savedSearches","RSitePref","Record","RFilterPref","RSortPref","sortBy","useScheduleData","Map","setVtubers","OrderedMap","setStreams","streamsByVtuber","setStreamsByVtuber","fetchData","last","fetch","cache","then","response","json","set","newStreams","source","membership","parseStream","groupBy","collection","toMap","catch","interval","setInterval","clearInterval","GET_CURRENT_TIME","tz","guess","App","aboutModalVisible","setAboutModalVisible","searchHelpModalVisible","setSearchHelpModalVisible","schedule","triggers","callback","intervalMs","defaultValue","result","setResult","newResult","usePoller","sitePref","setSitePref","clearSitePref","setFilterPref","clearFilterPref","sortPref","setSortPref","clearSortPref","reset","usePreferences","permission","setPermission","body","icon","window","Notification","toast","updateNotificationPermission","requestPermission","useNotifications","setSearch","newSearch","clearData","confirm","handleSearch","event","saveSearch","cleanSearch","trim","contains","deleteSavedSearch","index","acc","isAfter","isBefore","Navbar","expand","Container","Brand","Text","Toggle","aria-controls","Collapse","Nav","Link","Form","Group","as","InputGroup","Prepend","Control","placeholder","onChange","Append","DropdownButton","menuAlign","Dropdown","Item","reverse","savedSearch","stopPropagation","preventDefault","toJS","autoClose","closeOnClick","draggablePercent","hideProgressBar","newestOnTop","pauseOnFocusLoss","position","transition","Slide","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.82defd66.chunk.js","sourcesContent":["import { HTMLAttributes } from \"react\";\n\nexport default function Icon(\n  props: {\n    children: string;\n    className?: string;\n  } & HTMLAttributes<HTMLSpanElement>\n): JSX.Element {\n  const { children, className = \"\", ...otherProps } = props;\n  return (\n    <span className={`material-icons ${className}`} {...otherProps}>\n      {children}\n    </span>\n  );\n}\n","import { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nimport Icon from \"./Icon\";\n\nexport default function AboutModal(props: {\n  show: boolean;\n  handleClose: () => void;\n  notificationPermission: NotificationPermission;\n  showNotification: (\n    title: string,\n    body: string,\n    link: string,\n    icon: string\n  ) => void;\n}) {\n  const { show, handleClose, notificationPermission, showNotification } = props;\n\n  const [showEmail, setShowEmail] = useState<boolean>(false);\n\n  return (\n    <Modal className=\"about-modal\" show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>VTuber Streams</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          A page to check, search, and get notifications about VTuber streams.\n        </p>\n        <ul>\n          <li>\n            <Icon>star_outline</Icon> to bookmark a VTuber\n          </li>\n          <li>\n            <Icon>notifications_none</Icon> to receive notifications for a\n            VTuber (notifications are{\" \"}\n            <b>\n              {notificationPermission === \"granted\" ? \"allowed\" : \"blocked\"}\n            </b>\n            ,{\" \"}\n            <Button\n              className=\"align-baseline\"\n              onClick={() =>\n                showNotification(\n                  \"Test notification\",\n                  \"This is a test notification\",\n                  \"#\",\n                  `${process.env.PUBLIC_URL}/placeholder.png`\n                )\n              }\n              variant=\"outline-primary\"\n            >\n              test notification\n            </Button>\n            )\n          </li>\n          <li>\n            <b>Clear Data</b> will clear all data on this website\n          </li>\n        </ul>\n        <p>\n          Send questions or feedback to{\" \"}\n          {showEmail ? (\n            <a href=\"mailto:erin.xi@outlook.com\">erin.xi@outlook.com</a>\n          ) : (\n            <Button\n              className=\"align-baseline\"\n              onClick={() => setShowEmail(true)}\n              variant=\"outline-primary\"\n            >\n              Show Email\n            </Button>\n          )}{\" \"}\n          or{\" \"}\n          <a\n            href=\"https://discordapp.com/users/659617582298562570\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            enxi#0410\n          </a>\n          .\n        </p>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" onClick={handleClose}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import { List, Record, Map, Set } from \"immutable\";\nimport moment from \"moment-timezone\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nimport Icon from \"./Icon\";\nimport { Stream, VTuber } from \"./types\";\nimport { FilterPref, SitePref } from \"./usePreferences\";\n\nimport \"./ListSchedule.scss\";\n\nenum Status {\n  ENDED,\n  LIVE,\n  UPCOMING,\n}\n\ntype Condition = {\n  matches(\n    stream: Stream,\n    vtubers: Map<string, VTuber>,\n    bookmarks: Set<string>,\n    notifications: Set<string>\n  ): boolean;\n};\n\nfunction getStatus(stream: Stream, now: moment.Moment): Status {\n  if (stream.endTime == null && now.valueOf() > stream.startTime.getTime()) {\n    return Status.LIVE;\n  }\n  if (now.valueOf() >= stream.startTime.getTime()) {\n    return Status.ENDED;\n  }\n  return Status.UPCOMING;\n}\n\nfunction countQuotes(s: string): number {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === '\"') {\n      count++;\n    }\n  }\n  return count;\n}\n\nfunction splitQuery(query: string): string[] {\n  const parts: string[] = query.split(\" \");\n  const quotedParts: string[] = [];\n  let quotes = 0;\n  for (let i = 0; i < parts.length; i++) {\n    if (quotes % 2 === 1) {\n      quotedParts[quotedParts.length - 1] += \" \" + parts[i].replaceAll('\"', \"\");\n    } else {\n      quotedParts.push(parts[i].replaceAll('\"', \"\"));\n    }\n    quotes += countQuotes(parts[i]);\n  }\n  return quotedParts;\n}\n\nfunction parseCondition(query: string): Condition {\n  const cleanQuery = query.toLowerCase();\n\n  if (cleanQuery.startsWith(\"v:\")) {\n    const vtuberName = cleanQuery.substring(2);\n    return {\n      matches: (stream: Stream, vtubers: Map<string, VTuber>): boolean => {\n        const vtuber = vtubers.get(stream.vtuberId);\n        return (\n          vtuber != null &&\n          (vtuber.name.toLowerCase().includes(vtuberName) ||\n            vtuber.romanizedName.toLowerCase().includes(vtuberName))\n        );\n      },\n    };\n    /*\n  } else if (cleanQuery.startsWith(\"g:\")) {\n    const groupName = cleanQuery.substring(2);\n    return {\n      matches: (stream: Stream): boolean => {\n        const vtuber = vtubers.get(stream.vtuberId);\n        return vtuber.group.toLowerCase().includes(groupName);\n      },\n    };\n    */\n  } else if (cleanQuery.startsWith(\"g:\")) {\n    const groupName = cleanQuery.substring(2);\n    return {\n      matches: (stream: Stream, vtubers: Map<string, VTuber>): boolean => {\n        const vtuber = vtubers.get(stream.vtuberId);\n        return (\n          vtuber != null && vtuber.groupName.toLowerCase().includes(groupName)\n        );\n      },\n    };\n  } else if (cleanQuery === \"bookmark\" || cleanQuery === \"bookmarks\") {\n    return {\n      matches: (\n        stream: Stream,\n        vtubers: Map<string, VTuber>,\n        bookmarks: Set<string>\n      ): boolean => {\n        const vtuber = vtubers.get(stream.vtuberId);\n        return vtuber != null && bookmarks.has(vtuber.vtuberId);\n      },\n    };\n  } else if (cleanQuery === \"notification\" || cleanQuery === \"notifications\") {\n    return {\n      matches: (\n        stream: Stream,\n        vtubers: Map<string, VTuber>,\n        _: Set<string>,\n        notifications: Set<string>\n      ): boolean => {\n        const vtuber = vtubers.get(stream.vtuberId);\n        return vtuber != null && notifications.has(vtuber.vtuberId);\n      },\n    };\n  } else {\n    return {\n      matches: (stream: Stream, vtubers: Map<string, VTuber>): boolean => {\n        const vtuber = vtubers.get(stream.vtuberId);\n        return (\n          stream.title.toLowerCase().includes(cleanQuery) ||\n          stream.vtuberId.toLowerCase().includes(cleanQuery) ||\n          (vtuber != null &&\n            (vtuber.name.toLowerCase().includes(cleanQuery) ||\n              vtuber.romanizedName.toLowerCase().includes(cleanQuery)))\n        );\n      },\n    };\n  }\n}\n\nfunction parseFilterQuery(query: string): Condition[] {\n  const parts = splitQuery(query);\n  return parts\n    .map((part: string): Condition | null => parseCondition(part))\n    .filter(\n      (condition: Condition | null): condition is Condition => condition != null\n    );\n}\n\nexport default function ListSchedule(props: {\n  now: moment.Moment;\n  streams: Map<string, Stream>;\n  vtubers: Map<string, VTuber>;\n  sitePref: Record<SitePref>;\n  filterPref: Record<FilterPref>;\n  bookmarks: Set<string>;\n  setBookmarks: (bookmarks: Set<string>) => void;\n  notifications: Set<string>;\n  setNotifications: (notifications: Set<string>) => void;\n  setScrollToCurrentStream: (whyReact: () => () => boolean) => void;\n}) {\n  const {\n    now,\n    streams,\n    vtubers,\n    bookmarks,\n    setBookmarks,\n    notifications,\n    setNotifications,\n    filterPref,\n    setScrollToCurrentStream,\n  } = props;\n\n  const container = useRef<HTMLDivElement>(null);\n  const [firstView, setFirstView] = useState<boolean>(true);\n\n  const filteredStreams = useMemo((): List<Stream> => {\n    const query = filterPref.get(\"search\");\n    const conditions = parseFilterQuery(query);\n    return streams\n      .valueSeq()\n      .filter((stream: Stream): boolean =>\n        conditions.every((condition: Condition): boolean =>\n          condition.matches(stream, vtubers, bookmarks, notifications)\n        )\n      )\n      .toList();\n  }, [bookmarks, filterPref, notifications, streams, vtubers]);\n\n  const sortedStreams = useMemo(\n    (): List<Stream> =>\n      filteredStreams\n        .valueSeq()\n        .sort((a: Stream, b: Stream): number => {\n          const aStatus = getStatus(a, now);\n          const bStatus = getStatus(b, now);\n          if (aStatus !== bStatus) {\n            return aStatus < bStatus ? -1 : 1;\n          }\n          if (aStatus === Status.ENDED) {\n            return (\n              (a.endTime ?? a.startTime).getTime() -\n              (b.endTime ?? b.startTime).getTime()\n            );\n          } else {\n            return a.startTime.getTime() - b.startTime.getTime();\n          }\n        })\n        .toList(),\n    [filteredStreams, now]\n  );\n\n  const nextStream = useMemo(\n    (): Stream | null =>\n      sortedStreams.find(\n        (stream: Stream): boolean =>\n          (stream.endTime == null &&\n            now.valueOf() > stream.startTime.getTime()) ||\n          now.valueOf() < stream.startTime.getTime()\n      ) ?? null,\n    [now, sortedStreams]\n  );\n\n  const scrollToCurrentStream = useCallback(\n    (smooth: boolean = false): boolean => {\n      if (container.current != null && nextStream != null) {\n        const item = document.getElementById(nextStream.streamId);\n        if (item != null) {\n          item.scrollIntoView(smooth ? { behavior: \"smooth\" } : undefined);\n          return true;\n        }\n      }\n      return false;\n    },\n    [nextStream]\n  );\n\n  useEffect((): void => {\n    setScrollToCurrentStream((): (() => boolean) => scrollToCurrentStream);\n  }, [scrollToCurrentStream, setScrollToCurrentStream]);\n\n  const items = useMemo(\n    () =>\n      sortedStreams.map((stream: Stream): JSX.Element | null => {\n        const vtuberId = stream.vtuberId;\n        const vtuber: VTuber | undefined = vtubers.get(vtuberId);\n        if (vtuber == null) {\n          return null;\n        }\n\n        const hasBookmark = bookmarks.has(vtuberId);\n        const hasNotification = notifications.has(vtuberId);\n        const startTime = moment(stream.startTime);\n        const endTime = stream.endTime != null ? moment(stream.endTime) : null;\n        const status = getStatus(stream, now);\n\n        return (\n          <Row\n            key={stream.streamId}\n            id={stream.streamId}\n            className={`stream-item d-flex flex-row m-0 py-2 ${Status[\n              status\n            ].toLowerCase()} ${\n              nextStream?.streamId === stream.streamId ? \"next-stream\" : \"\"\n            }`}\n          >\n            <Col xs={2} md={1} className=\"stream-toggles text-center\">\n              <div\n                className={`toggle-bookmark ${hasBookmark ? \"active\" : \"\"}`}\n                onClick={() =>\n                  hasBookmark\n                    ? setBookmarks(bookmarks.remove(vtuberId))\n                    : setBookmarks(bookmarks.add(vtuberId))\n                }\n              >\n                <Icon>{hasBookmark ? \"star\" : \"star_outline\"}</Icon>\n              </div>\n              <br />\n              <div\n                className={`toggle-notification ${\n                  hasNotification ? \"active\" : \"\"\n                }`}\n                onClick={() =>\n                  hasNotification\n                    ? setNotifications(notifications.remove(vtuberId))\n                    : setNotifications(notifications.add(vtuberId))\n                }\n              >\n                <Icon>\n                  {hasNotification\n                    ? \"notifications_active\"\n                    : \"notifications_none\"}\n                </Icon>\n              </div>\n            </Col>\n\n            <Col xs={4} md={2} lg={1} className=\"stream-vtuber p-0\">\n              <a href={vtuber.link}>\n                <img src={vtuber.thumbnail} alt={vtuber.name} />\n                <br />\n                {vtuber.shortName}\n              </a>\n            </Col>\n\n            <Col xs={6} md={3} lg={2} className=\"stream-info p-0 text-center\">\n              <a href={stream.link} target=\"_blank\" rel=\"noreferrer\">\n                <img\n                  src={\n                    stream.thumbnail ??\n                    `${process.env.PUBLIC_URL}/placeholder.png`\n                  }\n                  alt={\"Video thumbnail\"}\n                />\n              </a>\n            </Col>\n\n            <Col\n              xs={12}\n              md={6}\n              className=\"stream-title px-4 px-md-0 py-2 text-center text-md-left\"\n            >\n              <a href={stream.link} target=\"_blank\" rel=\"noreferrer\">\n                {stream.title}\n              </a>\n            </Col>\n\n            <Col xs={12} lg={2} className=\"stream-time p-0 text-center\">\n              {startTime.format(\"h:mm A\")} <br className=\"d-none d-lg-inline\" />\n              <i>\n                {endTime != null\n                  ? `ended ${endTime.from(now)}`\n                  : status === Status.LIVE\n                  ? `started ${startTime.from(now)}`\n                  : `starting ${startTime.from(now)}`}\n              </i>\n            </Col>\n          </Row>\n        );\n      }),\n    [\n      bookmarks,\n      setBookmarks,\n      notifications,\n      setNotifications,\n      nextStream,\n      now,\n      sortedStreams,\n      vtubers,\n    ]\n  );\n\n  useEffect((): void => {\n    if (firstView && sortedStreams.count() > 0) {\n      if (scrollToCurrentStream()) {\n        setFirstView(false);\n      }\n    }\n  }, [firstView, scrollToCurrentStream, sortedStreams]);\n\n  return (\n    <div className=\"list-schedule\" ref={container}>\n      {items}\n    </div>\n  );\n}\n","import Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nimport Icon from \"./Icon\";\n\nexport default function SearchHelpModal(props: {\n  show: boolean;\n  handleClose: () => void;\n}) {\n  const { show, handleClose } = props;\n\n  return (\n    <Modal className=\"search-help-modal\" show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Search Help</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>\n          Use the search to filter for VTubers and streams. The following\n          case-insensitive search terms are supported:\n        </p>\n        <ul>\n          <li>\n            General search terms such as <code>pikamee</code> or{\" \"}\n            <code>supachat</code> filter both VTuber and video titles.\n          </li>\n          <li>\n            Terms with spaces require surrounding quotes, such as{\" \"}\n            <code>\"super chat\"</code>.\n          </li>\n          <li>\n            Specific VTubers can be searched using the <code>v:</code> prefix,\n            such as <code>v:pikamee</code>.\n          </li>\n          <li>\n            Specific groups can be searched using the <code>g:</code> prefix.\n            The supported groups are:\n            <ul>\n              <li>\n                <code>g:hololive</code>\n              </li>\n              <li>\n                <code>g:voms</code>\n              </li>\n            </ul>\n          </li>\n          <li>\n            Save searches using the <Icon>playlist_add</Icon> button.\n          </li>\n        </ul>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" onClick={handleClose}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n","import { List, Record } from \"immutable\";\nimport { useCallback, useState } from \"react\";\n\nfunction getRecordOrDefault<T>(\n  key: string,\n  factory: (values?: any) => Record<T>\n): Record<T> {\n  const item = localStorage.getItem(key);\n  if (item != null) {\n    try {\n      const data = JSON.parse(item);\n      for (const key in data) {\n        if (Array.isArray(data[key])) {\n          data[key] = List(data[key]);\n        }\n      }\n      return factory(data);\n    } catch (e) {\n      return factory();\n    }\n  }\n  return factory();\n}\n\nexport default function useStoredRecord<T>(\n  key: string,\n  factory: (values?: any) => Record<T>\n): [Record<T>, (value: Record<T>) => void, () => void] {\n  const [value, setValueInner] = useState<Record<T>>(\n    getRecordOrDefault<T>(key, factory)\n  );\n\n  const setValue = useCallback(\n    (newValue: Record<T>): void => {\n      localStorage.setItem(key, JSON.stringify(newValue.toJSON()));\n      setValueInner(newValue);\n    },\n    [key]\n  );\n\n  const clearValue = useCallback(() => {\n    localStorage.removeItem(key);\n    setValueInner(factory());\n  }, [factory, key]);\n\n  return [value, setValue, clearValue];\n}\n","import { Set } from \"immutable\";\nimport { useCallback, useState } from \"react\";\n\nfunction getOrDefault(key: string): Set<string> {\n  const item = localStorage.getItem(key);\n  if (item != null) {\n    try {\n      return Set(JSON.parse(item) as unknown as string[]);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  return Set();\n}\n\nexport default function useStoredSet(\n  key: string\n): [Set<string>, (value: Set<string>) => void] {\n  const [value, setValueInner] = useState<Set<string>>(getOrDefault(key));\n\n  const setValue = useCallback(\n    (newValue: Set<string>) => {\n      localStorage.setItem(key, JSON.stringify(newValue.toArray()));\n      setValueInner(newValue);\n    },\n    [key]\n  );\n\n  return [value, setValue];\n}\n","import { List, Record, Set } from \"immutable\";\nimport { useCallback } from \"react\";\n\nimport { NameDisplay, SortBy, Timezone } from \"./types\";\nimport useStoredRecord from \"./useStoredRecord\";\nimport useStoredSet from \"./useStoredSet\";\n\nexport const TIMEZONES: Timezone[] = [\n  { name: \"UTC\", identifier: \"UTC\", offset: 0 },\n  { name: \"PDT\", identifier: \"America/Los_Angeles\", offset: 480 },\n];\n\nexport const NAME_DISPLAYS: NameDisplay[] = [\"original\", \"romaji\", \"short\"];\n\nexport const SORT_BYS: SortBy[] = [\"next stream\", \"popularity\", \"random\"];\n\nfunction getDefaultTimezone(): Timezone {\n  const offset = new Date().getTimezoneOffset();\n  const timezone = TIMEZONES.reduce((minTimezone, timezone) =>\n    Math.abs(offset - timezone.offset) < Math.abs(offset - minTimezone.offset)\n      ? timezone\n      : minTimezone\n  );\n  if (timezone != null) {\n    return timezone;\n  }\n\n  // Return UTC\n  return TIMEZONES[0];\n}\n\nexport type SitePref = {\n  timezone: Timezone;\n  nameDisplay: NameDisplay;\n};\n\nconst DEFAULT_SITE_PREF: SitePref = {\n  timezone: getDefaultTimezone(),\n  nameDisplay: \"original\",\n};\n\nexport type FilterPref = {\n  search: string;\n  savedSearches: List<string>;\n};\n\nconst DEFAULT_FILTER_PREF: FilterPref = {\n  search: \"\",\n  savedSearches: List(),\n};\n\nexport type SortPref = {\n  sortBy: SortBy;\n};\n\nconst DEFAULT_SORT_PREF: SortPref = {\n  sortBy: \"next stream\",\n};\n\nexport const RSitePref = Record<SitePref>(DEFAULT_SITE_PREF);\nexport const RFilterPref = Record<FilterPref>(DEFAULT_FILTER_PREF);\nexport const RSortPref = Record<SortPref>(DEFAULT_SORT_PREF);\n\nexport default function usePreferences() {\n  const [sitePref, setSitePref, clearSitePref] = useStoredRecord<SitePref>(\n    \"site\",\n    RSitePref\n  );\n  const [filterPref, setFilterPref, clearFilterPref] =\n    useStoredRecord<FilterPref>(\"filter\", RFilterPref);\n  const [sortPref, setSortPref, clearSortPref] = useStoredRecord<SortPref>(\n    \"sort\",\n    RSortPref\n  );\n  const [bookmarks, setBookmarks] = useStoredSet(\"bookmarks\");\n  const [notifications, setNotifications] = useStoredSet(\"notifications\");\n\n  const reset = useCallback(() => {\n    clearSitePref();\n    clearFilterPref();\n    clearSortPref();\n    setBookmarks(Set());\n    setNotifications(Set());\n  }, [\n    clearSitePref,\n    clearFilterPref,\n    clearSortPref,\n    setBookmarks,\n    setNotifications,\n  ]);\n\n  return {\n    sitePref,\n    setSitePref,\n    filterPref,\n    setFilterPref,\n    sortPref,\n    setSortPref,\n    reset,\n    bookmarks,\n    setBookmarks,\n    notifications,\n    setNotifications,\n  };\n}\n","import { List, Map, OrderedMap } from \"immutable\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nimport {\n  ScheduleData,\n  SerializedStream,\n  Stream,\n  StreamId,\n  StreamSource,\n  VTuberId,\n  VTuber,\n} from \"./types\";\n\nconst ONE_MINUTE_MS = 60 * 1000;\n\nfunction parseStream(stream: SerializedStream): Stream {\n  return {\n    streamId: stream.streamId,\n    vtuberId: stream.vtuberId,\n    source: stream.source as StreamSource | null,\n    title: stream.title,\n    link: stream.link,\n    thumbnail: stream.thumbnail,\n    startTime: new Date(stream.startTime),\n    endTime: stream.endTime != null ? new Date(stream.endTime) : null,\n    membership: stream.membership === 1,\n  };\n}\n\nexport default function useScheduleData() {\n  const [vtubers, setVtubers] = useState<Map<VTuberId, VTuber>>(Map());\n  const [streams, setStreams] = useState<Map<StreamId, Stream>>(OrderedMap());\n  const [streamsByVtuber, setStreamsByVtuber] = useState<\n    Map<VTuberId, List<Stream>>\n  >(Map());\n\n  const fetchData = useCallback((last?: number): void => {\n    fetch(`https://vtuber-streams-data.herokuapp.com/latest.json`, {\n      cache: \"no-cache\",\n    })\n      .then((response) => response.json())\n      .then((data: ScheduleData) => {\n        setVtubers(\n          data.vtubers.reduce(\n            (vtubers, vtuber) =>\n              vtubers.has(vtuber.vtuberId)\n                ? vtubers\n                : vtubers.set(vtuber.vtuberId, vtuber),\n            Map<VTuberId, VTuber>()\n          )\n        );\n        const newStreams = data.streams.reduce(\n          (streams, stream) =>\n            streams.has(stream.streamId)\n              ? streams\n              : streams.set(stream.streamId, parseStream(stream)),\n          OrderedMap<StreamId, Stream>()\n        );\n        setStreams(newStreams);\n        setStreamsByVtuber(\n          newStreams\n            .valueSeq()\n            .groupBy((stream) => stream.vtuberId)\n            .map((collection) => collection.toList())\n            .toMap()\n        );\n      })\n      .catch((e) => console.error(e));\n  }, []);\n\n  useEffect((): (() => void) => {\n    fetchData();\n\n    let last = Date.now();\n    const interval = setInterval((): void => {\n      fetchData(last);\n      last = Date.now();\n    }, ONE_MINUTE_MS);\n\n    return () => clearInterval(interval);\n  }, [fetchData]);\n\n  return { vtubers, streams, streamsByVtuber };\n}\n","import { List, Map } from \"immutable\";\nimport moment from \"moment-timezone\";\nimport {\n  ChangeEvent,\n  MouseEvent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Row from \"react-bootstrap/Row\";\nimport { Slide, ToastContainer } from \"react-toastify\";\n\nimport AboutModal from \"./AboutModal\";\nimport ListSchedule from \"./ListSchedule\";\nimport Icon from \"./Icon\";\nimport SearchHelpModal from \"./SearchHelpModal\";\nimport { Stream } from \"./types\";\nimport useNotifications from \"./useNotifications\";\nimport usePoller from \"./usePoller\";\nimport usePreferences from \"./usePreferences\";\nimport useScheduleData from \"./useScheduleData\";\n\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\ntype TriggerState = \"after\" | \"before\" | \"unknown\";\n\nconst TEN_SECONDS_MS = 10 * 1000;\nconst ONE_HOUR_MS = 60 * 60 * 1000;\n\nconst GET_CURRENT_TIME = () => moment.tz(undefined, moment.tz.guess());\n\nfunction App() {\n  const [aboutModalVisible, setAboutModalVisible] = useState<boolean>(false);\n  const [searchHelpModalVisible, setSearchHelpModalVisible] =\n    useState<boolean>(false);\n  const schedule = useRef<HTMLDivElement>(null);\n  const [scrollToCurrentStream, setScrollToCurrentStream] = useState<\n    ((smooth?: boolean) => boolean) | null\n  >(null);\n  const triggers = useRef<Map<string, TriggerState>>(Map());\n\n  const now = usePoller<moment.Moment>(\n    GET_CURRENT_TIME,\n    TEN_SECONDS_MS,\n    GET_CURRENT_TIME()\n  );\n\n  const {\n    sitePref,\n    filterPref,\n    setFilterPref,\n    reset,\n    bookmarks,\n    setBookmarks,\n    notifications,\n    setNotifications,\n  } = usePreferences();\n\n  const { notificationPermission, showNotification } = useNotifications();\n\n  const { vtubers, streams } = useScheduleData();\n\n  const search = useMemo((): string => filterPref.get(\"search\"), [filterPref]);\n\n  const setSearch = useCallback(\n    (newSearch: string): void =>\n      setFilterPref(filterPref.set(\"search\", newSearch)),\n    [filterPref, setFilterPref]\n  );\n\n  const clearData = useCallback((): void => {\n    if (\n      window.confirm(\n        \"Press OK to clear all bookmarks, filters, etc. from this web page.\"\n      )\n    ) {\n      reset();\n    }\n  }, [reset]);\n\n  const handleSearch = useCallback(\n    (event: ChangeEvent<HTMLInputElement>): void =>\n      setSearch(event.target.value),\n    [setSearch]\n  );\n\n  const savedSearches = useMemo((): List<string> => {\n    return filterPref.get(\"savedSearches\");\n  }, [filterPref]);\n\n  const saveSearch = useCallback((): void => {\n    const cleanSearch = search.trim();\n    if (cleanSearch.length > 0 && !savedSearches.contains(cleanSearch)) {\n      setFilterPref(\n        filterPref.set(\"savedSearches\", savedSearches.push(cleanSearch))\n      );\n    }\n  }, [savedSearches, search, filterPref, setFilterPref]);\n\n  const deleteSavedSearch = useCallback(\n    (index: number): void => {\n      setFilterPref(\n        filterPref.set(\"savedSearches\", savedSearches.remove(index))\n      );\n    },\n    [savedSearches, filterPref, setFilterPref]\n  );\n\n  useEffect((): void => {\n    triggers.current = streams.reduce(\n      (\n        acc: Map<string, TriggerState>,\n        stream: Stream\n      ): Map<string, TriggerState> => {\n        if (acc.has(stream.streamId)) {\n          if (\n            acc.get(stream.streamId) === \"before\" &&\n            now.isAfter(stream.startTime)\n          ) {\n            const vtuber = vtubers.get(stream.vtuberId)!;\n            if (notifications.has(vtuber.vtuberId)) {\n              showNotification(\n                `${vtuber.shortName}'s stream is starting!`,\n                stream.title,\n                stream.link,\n                stream.thumbnail ?? vtuber.thumbnail\n              );\n            }\n            return acc.set(stream.streamId, \"after\");\n          } else {\n            return acc;\n          }\n        } else {\n          return acc.set(\n            stream.streamId,\n            now.isBefore(stream.startTime) ? \"before\" : \"after\"\n          );\n        }\n      },\n      triggers.current\n    );\n  }, [notifications, now, showNotification, streams, vtubers]);\n\n  return (\n    <div className=\"app d-flex flex-column h-100\">\n      <Navbar expand=\"md\">\n        <Container className=\"px-0 px-md-1\">\n          <Navbar.Brand>VTuber Streams</Navbar.Brand>\n          <Navbar.Text className=\"d-none d-sm-inline-block\">\n            {now.format(\"h:mm A z\")}\n          </Navbar.Text>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link\n                className=\"d-sm-none\"\n                href=\"#\"\n                onClick={() => setSearchHelpModalVisible(true)}\n              >\n                Search Help\n              </Nav.Link>\n              <Nav.Link href=\"#\" onClick={clearData}>\n                Clear Data\n              </Nav.Link>\n              <Nav.Link href=\"#\" onClick={() => setAboutModalVisible(true)}>\n                About\n              </Nav.Link>\n              {/*\n              <NavDropdown id=\"timezone\" title={sitePref.get(\"timezone\").name}>\n                {TIMEZONES.map((timezone) => (\n                  <NavDropdown.Item\n                    key={timezone.name}\n                    onClick={() =>\n                      setSitePref(sitePref.set(\"timezone\", timezone))\n                    }\n                  >\n                    {timezone.name}\n                  </NavDropdown.Item>\n                ))}\n              </NavDropdown>\n              <NavDropdown\n                id=\"name_display\"\n                title={sitePref.get(\"nameDisplay\")}\n              >\n                {NAME_DISPLAYS.map((nameDisplay) => (\n                  <NavDropdown.Item\n                    key={nameDisplay}\n                    className=\"text-capitalize\"\n                    onClick={() =>\n                      setSitePref(sitePref.set(\"nameDisplay\", nameDisplay))\n                    }\n                  >\n                    {nameDisplay}\n                  </NavDropdown.Item>\n                ))}\n              </NavDropdown>\n              */}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      <Container className=\"filters px-3 px-sm-0\">\n        <Row>\n          <Form.Group as={Col} className=\"m-0\">\n            <InputGroup className=\"mb-2 mr-sm-2\">\n              <InputGroup.Prepend>\n                <InputGroup.Text\n                  className=\"scroll icon-button\"\n                  onClick={() => {\n                    if (scrollToCurrentStream != null) {\n                      scrollToCurrentStream(/* smooth= */ true);\n                    }\n                  }}\n                >\n                  <span className=\"material-icons\">update</span>\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n              <InputGroup.Prepend className=\"d-none d-sm-flex\">\n                <InputGroup.Text\n                  className=\"search icon-button\"\n                  onClick={() => setSearchHelpModalVisible(true)}\n                >\n                  <span className=\"material-icons\">search</span>\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n              <Form.Control\n                id=\"search\"\n                placeholder=\"v:pikamee title bookmarks\"\n                onChange={handleSearch}\n                value={search}\n              />\n              <InputGroup.Append>\n                <DropdownButton\n                  title=\"\"\n                  menuAlign=\"right\"\n                  variant=\"outline-secondary\"\n                >\n                  <Dropdown.Item\n                    key={\"clear\"}\n                    onClick={(): void => setSearch(\"\")}\n                  >\n                    Clear search\n                  </Dropdown.Item>\n                  {savedSearches.count() > 0 ? (\n                    savedSearches\n                      .reverse()\n                      .map(\n                        (savedSearch: string, index: number): JSX.Element => (\n                          <Dropdown.Item\n                            key={index}\n                            className=\"d-flex\"\n                            onClick={(): void => setSearch(savedSearch)}\n                          >\n                            {savedSearch}\n                            <div\n                              className=\"clear-search ml-auto pl-2\"\n                              key=\"clear\"\n                            >\n                              <Icon\n                                onClick={(event: MouseEvent): boolean => {\n                                  deleteSavedSearch(index);\n                                  event.stopPropagation();\n                                  event.preventDefault();\n                                  return false;\n                                }}\n                              >\n                                clear\n                              </Icon>\n                            </div>\n                          </Dropdown.Item>\n                        )\n                      )\n                      .toJS()\n                  ) : (\n                    <Dropdown.Header>No saved searches</Dropdown.Header>\n                  )}\n                </DropdownButton>\n              </InputGroup.Append>\n              <InputGroup.Append>\n                <InputGroup.Text\n                  className=\"save icon-button\"\n                  onClick={saveSearch}\n                >\n                  <span className=\"material-icons\">playlist_add</span>\n                </InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n          </Form.Group>\n          {/*\n            <Form.Group as={Col} className=\"m-0\">\n              <Dropdown>\n                <Dropdown.Toggle id=\"sort\" className=\"text-capitalize\">\n                  Sort by: {sortPref.get(\"sortBy\")}\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                  {SORT_BYS.map((sortBy) => (\n                    <Dropdown.Item\n                      key={sortBy}\n                      className=\"text-capitalize\"\n                      onClick={() =>\n                        setSortPref(sortPref.set(\"sortBy\", sortBy))\n                      }\n                    >\n                      {sortBy}\n                    </Dropdown.Item>\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n            </Form.Group>\n            */}\n        </Row>\n      </Container>\n      <Container className=\"schedule px-0 mt-2\" ref={schedule}>\n        <ListSchedule\n          now={now}\n          streams={streams}\n          vtubers={vtubers}\n          sitePref={sitePref}\n          filterPref={filterPref}\n          bookmarks={bookmarks}\n          setBookmarks={setBookmarks}\n          notifications={notifications}\n          setNotifications={setNotifications}\n          setScrollToCurrentStream={setScrollToCurrentStream}\n        />\n      </Container>\n      <AboutModal\n        show={aboutModalVisible}\n        handleClose={() => setAboutModalVisible(false)}\n        notificationPermission={notificationPermission}\n        showNotification={showNotification}\n      />\n      <SearchHelpModal\n        show={searchHelpModalVisible}\n        handleClose={() => setSearchHelpModalVisible(false)}\n      />\n      <ToastContainer\n        autoClose={ONE_HOUR_MS}\n        closeOnClick={true}\n        draggablePercent={50}\n        hideProgressBar={true}\n        newestOnTop={true}\n        pauseOnFocusLoss={false}\n        position=\"top-center\"\n        transition={Slide}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nexport default function usePoller<T>(\n  callback: () => T,\n  intervalMs: number,\n  defaultValue: T\n): T {\n  const [result, setResult] = useState<T>(defaultValue);\n\n  useEffect(() => {\n    const checkCallback = () => {\n      const newResult = callback();\n      if (result !== newResult) {\n        setResult(newResult);\n      }\n    };\n    const interval = setInterval(checkCallback, intervalMs);\n\n    return () => clearInterval(interval);\n  }, [callback, intervalMs, result]);\n\n  return result;\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\n\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nexport default function useNotifications(): {\n  notificationPermission: NotificationPermission;\n  showNotification: (\n    title: string,\n    body: string,\n    link: string,\n    icon: string\n  ) => void;\n} {\n  const [permission, setPermission] =\n    useState<NotificationPermission>(\"default\");\n\n  const showNotification = useCallback(\n    (title: string, body: string, link: string, icon: string): void => {\n      if (window.Notification != null && permission === \"granted\") {\n        new window.Notification(title, { body, icon });\n      } else {\n        // Show a toast instead\n        toast(\n          <div className=\"notification-toast\" key={link}>\n            <img alt={`${title} notification icon`} src={icon} />\n            <div>\n              <h1>{title}</h1>\n              <p>\n                <a href={link} rel=\"noreferrer\" target=\"_blank\">\n                  {body}\n                </a>\n              </p>\n            </div>\n          </div>\n        );\n      }\n    },\n    [permission]\n  );\n\n  const updateNotificationPermission = useCallback(\n    (permission: NotificationPermission): void => {\n      setPermission(permission);\n    },\n    []\n  );\n\n  useEffect((): void => {\n    if (window.Notification != null) {\n      window.Notification.requestPermission().then(\n        (permission: NotificationPermission): void => {\n          updateNotificationPermission(permission);\n        }\n      );\n    }\n  }, [updateNotificationPermission]);\n\n  return { notificationPermission: permission, showNotification };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}